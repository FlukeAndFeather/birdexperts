---
title: "Seabird Expert Opinion Elicitation"
format: 
  html:
    code-fold: true
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)
library(patchwork)
theme_set(theme_classic())
set.seed(123)

logit <- function(x) log(x / (1 - x))
inv_logit <- function(x) exp(x) / (1 + exp(x))

```

## Intro

Where them birds at? Theoretical example of bias correction.

Known: 10 species' relative utilization of the lease areas.

Unknown: 5 species' relative utilization of the lease areas.

How: 8 experts give their opinion. We use their biases from the known species to correct the estimates for the unknown species.

## Model

Let's simulate some expert opinions. We're going to assume:

-   Experts tend to overestimate utilization

-   Errors are correlated within experts and species (random effects)

The following model says the *i*-th utilization, $u_i$, is a beta (proportion 0-1) random variable with mean $\mu_i$ ( $\mu_i \in (0,1)$ ) and shape parameter $\phi$. The logit of $\mu$ is the sum of an intercept ( $\alpha$, which describes how much experts tend to overestimate as a whole), the mean of the expert opinions ( $o_{ij}$ ) with random intercepts per expert ( $Z_x$, i.e., each expert has their own offset ), and a random intercept for each species ( $Z_s$, i.e., each species' general misperception). We'll logit-transform opinions prior to model fitting. $$
\begin{align}
u_i &\sim Beta(\mu_i, \phi) \\
logit(\mu_i) &= \alpha + \frac{1}{X} \sum_{j=1}^X(o_{ij} + Z_x[x_j]) + Z_s[s_i] \\
\phi &\sim Gamma(1, 10^{-5}) \\ 
\alpha &\sim Normal(0, 5) \\
Z_x &\sim Normal(0, \sigma_x) \\
Z_s &\sim Normal(0, \sigma_s) \\
\sigma_x, \sigma_s &\sim Exponential(1)
\end{align}
$$

Structuring the model this way allows us to estimate the value of interest (utilization, $u$) from the predictors we'll have available, the opinion ( $o$ ) and the identity of the expert ( $x$ ). When we get to unknown species stage, we won't have the random effect for the unknown species ( $Z_s$ ). BUT we'll have an estimate for the distribution of $Z_s$ based on our estimate of $\sigma_s$, which will give us confidence intervals for our predicted $u$'s. Note the prior on $\phi$ looks batshit. That's a necessity because of how small the proportions involved are.

### Simulation

Here we simulate some species' "actual" utilizations and the expert opinions. The triangle is the utilization, points in color indicate experts' opinions. The black point with lines is the mean and standard deviation of the expert opinions. I've highlighted two experts (Foxtrot and Hotel) with larger, more solid points.

A couple things to notice:

1.  Experts generally overestimate species' utilizations. I.e., the black points and lines tend to be to the right of the triangles. You can tune this with the $\alpha$ parameter.
2.  The degree of overestimation is correlated within experts. E.g., Foxtrot (blue) has a tendency to guess the highest, Hotel (pink) tends to guess the lowest. You can tune this with the $\sigma_x$ parameter.
3.  Opinions are correlated within species. E.g., everyone guessed way too high for LAAL, but tended to be kind of low for SCMU. You can tune this with the $\sigma_s$ parameter.

```{r}
#| label: simulate

# Species and experts
known_species <- c("PFSH", "COMU", "ASSP", "SOSH", "LAAL", "BFAL", "WEGU", "SCMU", "PIGU", "CATE")
unknown_species <- c("STAL", "RFBO", "HAPT", "RBTR", "BRBO")
experts <- c("Alpha", "Bravo", "Charlie", "Delta", "Echo", "Foxtrot", "Golf", "Hotel")

# Simulation 
alpha <- -0.5
phi <- 1e4
sigma_x <- 0.1
sigma_s <- 0.2
Zx <- rnorm(length(experts), 0, sigma_x)
names(Zx) <- experts
Zs <- rnorm(length(known_species), 0, sigma_s)
names(Zs) <- known_species

# Create dummy utilizations so opinions cluster around something reasonable
dummy_u <- runif(length(known_species), 0.0001, 0.003)
names(dummy_u) <- known_species

opinions <- expand_grid(expert = experts,
                        species = known_species) %>% 
  mutate(logit_opin = rnorm(
    nrow(.), 
    logit(dummy_u[species]) + Zx[expert] + Zs[species], 
    0.25
  ),
  opinion = inv_logit(logit_opin))

utilizations <- opinions %>% 
  group_by(species) %>% 
  summarize(logit_mu = alpha + mean(logit_opin + Zx[expert]) + Zs[species[1]]) %>% 
  mutate(mu = inv_logit(logit_mu),
         shape1 = mu * phi,
         shape2 = (1 - mu) * phi,
         utilization = rbeta(nrow(.), shape1, shape2),
         species2 = fct_reorder(species, utilization))

opinions$species2 = factor(opinions$species, 
                           levels = levels(utilizations$species2))

opin_summ <- opinions %>% 
  group_by(species2) %>% 
  summarize(opinion_lwr = mean(opinion) - sd(opinion),
            opinion_upr = mean(opinion) + sd(opinion),
            opinion = mean(opinion))

Zx_min <- names(Zx)[which.min(Zx)]
Zx_max <- names(Zx)[which.max(Zx)]
ggplot(utilizations, aes(x = utilization, y = species2)) +
  geom_point(aes(x = opinion, y = species, color = expert),
             opinions,
             alpha = 0.5) +
  geom_point(aes(x = opinion, y = species, color = expert),
             filter(opinions, expert %in% c(Zx_min, Zx_max)),
             size = 3) +
  geom_pointrange(aes(x = opinion,
                      xmin = opinion_lwr, 
                      xmax = opinion_upr),
                  opin_summ,
                  shape = 10) +
  geom_point(size = 2, shape = 6)

```

### Model fitting

Cool. Now let's fit the model.

```{r}
#| label: fit-model
#| execute: false

opinions_wide <- opinions %>% 
  select(expert, species, opinion) %>% 
  pivot_wider(names_from = expert, values_from = opinion) %>% 
  arrange(species)
opinions_matrix <- as.matrix(opinions_wide[, -1])

char_to_int <- function(x) as.integer(factor(x))
stan_data <- list(
  S = length(known_species),
  X = length(experts),
  u = utilizations$utilization,
  o = opinions_matrix,
  s = char_to_int(utilizations$species),
  x = char_to_int(colnames(opinions_matrix))
)

model <- rstan::stan("seabirdexperts.stan", 
                     data = stan_data, 
                     chains = 4,
                     cores = 4,
                     iter = 5000)

```
